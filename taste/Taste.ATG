COMPILER Taste

	// types
	readonly undef = 0;
	readonly integer = 1;
	readonly boolean = 2;

	// object kinds
	readonly var = 0;
	readonly proc = 1;

	public tab:SymbolTable;
	public gen:CodeGenerator;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab



PRODUCTIONS
/*------------------------------------------------------------------------*/
AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  ).
/*------------------------------------------------------------------------*/
Expr<out number type>       (. let type1:number; let op:Op; .)
= SimExpr<out type>
  [ RelOp<out op>
    SimExpr<out type1>   (. if (type != type1) this.SemErr("incompatible types");
                           this.gen.Emit(op); type = this.boolean; .)
  ].
/*------------------------------------------------------------------------*/
Factor<out number type>     (.let n:number;let obj_:Obj;let  name:string; .)
=                        (. type = this.undef; .)
  ( Ident<out name>      (. obj_ =this.tab.Find(name); type = obj_.type;
                            if (obj_.kind == this.var) {
								if (obj_.level == 0)this.gen.Emit(Op.LOADG, obj_.adr);
								else this.gen.Emit(Op.LOAD, obj_.adr);
                            } else this.SemErr("variable expected"); .)
  | number               (. n = this.t.val.charCodeAt(0);
                            this.gen.Emit(Op.CONST, n); type = this.integer; .)
  | '-'
    Factor<out type>     (. if (type != this.integer) {
                              this.SemErr("integer type expected"); type = this.integer;
                            }
                            this.gen.Emit(Op.NEG); .)
  | "true"               (. this.gen.Emit(Op.CONST, 1); type = this.boolean; .)
  | "false"              (. this.gen.Emit(Op.CONST, 0); type = this.boolean; .)
  ).
/*------------------------------------------------------------------------*/
Ident<out string name>
= ident                  (. name = this.t.val; .).
/*------------------------------------------------------------------------*/
MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | '/'                  (. op = Op.DIV; .)
  ).
/*------------------------------------------------------------------------*/
ProcDecl                 (.let name_:string; let obj_:Obj; let adr:number; .)
= "void"
  Ident<out name_>        (. obj_ = this.tab.NewObj(name_, this.proc, this.undef); obj_.adr =this.gen.pc;
                            if (name_ == "Main")this.gen.progStart =this.gen.pc;
                           this.tab.OpenScope(); .)
  '(' ')'
  '{'                    (.this.gen.Emit(Op.ENTER, 0); adr =this.gen.pc - 2; .)
  { VarDecl | Stat }
  '}'                    (.this.gen.Emit(Op.LEAVE);this.gen.Emit(Op.RET);
                           this.gen.Patch(adr,this.tab.topScope.nextAdr);
                           this.tab.CloseScope(); .).
/*------------------------------------------------------------------------*/
RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "=="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  ).
/*------------------------------------------------------------------------*/
SimExpr<out number type>    (. let type1:number; let op:Op; .)
= Term<out type>
  { AddOp<out op>
    Term<out type1>      (. if (type != this.integer || type1 != this.integer)
                              this.SemErr("integer type expected");
                           this.gen.Emit(op); .)
	}.
/*------------------------------------------------------------------------*/
Stat                     (.let type:number;let name_:string;let obj_:Obj;
                             let adr:number;let adr2:number;let loopstart:number; .)
= Ident<out name_>        (. obj_ =this.tab.Find(name_); .)
  ( '='                  (. if (obj_.kind != this.var) this.SemErr("cannot assign to this.procedure"); .)
		Expr<out type> ';'
											   (. if (type != obj_.type) this.SemErr("incompatible types");
													  if (obj_.level == 0)this.gen.Emit(Op.STOG, obj_.adr);
													  else this.gen.Emit(Op.STO, obj_.adr); .)
	| '(' ')' ';'          (. if (obj_.kind != this.proc) this.SemErr("object is not a this.procedure");
												  	this.gen.Emit(Op.CALL, obj_.adr); .)
	)

| "if" 
	'(' Expr<out type> ')' (. if (type != this.boolean) this.SemErr("boolean type expected");
													 this.gen.Emit(Op.FJMP, 0); adr =this.gen.pc - 2; .)
	Stat
	[ "else"               (.this.gen.Emit(Op.JMP, 0); adr2 =this.gen.pc - 2;
													 this.gen.Patch(adr,this.gen.pc);
													  adr = adr2; .)
		Stat 
	]                      (.this.gen.Patch(adr,this.gen.pc); .)

| "while"                (. loopstart =this.gen.pc; .)
	'(' Expr<out type> ')' (. if (type != this.boolean) this.SemErr("boolean type expected");
													 this.gen.Emit(Op.FJMP, 0); adr =this.gen.pc - 2; .)
	Stat                   (.this.gen.Emit(Op.JMP, loopstart);this.gen.Patch(adr,this.gen.pc); .)

| "read"
	Ident<out name_> ';'    (. obj_ =this.tab.Find(name_);
													  if (obj_.type != this.integer) this.SemErr("integer type expected");
													 this.gen.Emit(Op.READ);
													  if (obj_.level == 0)this.gen.Emit(Op.STOG, obj_.adr);
													  else this.gen.Emit(Op.STO, obj_.adr); .)

| "write" 
	Expr<out type> ';'     (. if (type != this.integer) this.SemErr("integer type expected");
												   this.gen.Emit(Op.WRITE); .)

| '{' { Stat | VarDecl } '}' .
/*------------------------------------------------------------------------*/
Taste                    (.let name_:string; .)
= "program"
  Ident<out name_>        (.this.tab.OpenScope(); .)
  '{'
  { VarDecl | ProcDecl }
  '}'                    (.this.tab.CloseScope();
                            if (this.gen.progStart == -1) this.SemErr("main function never defined");
                            .).
/*------------------------------------------------------------------------*/
Term<out number type>       (.let type1:number;let  op:Op; .)
= Factor<out type>
  { MulOp<out op>
    Factor<out type1>    (. if (type != this.integer || type1 != this.integer)
                              this.SemErr("integer type expected");
                           this.gen.Emit(op); .)
	}.
/*------------------------------------------------------------------------*/
Type<out number type>
=                        (. type = this.undef; .)
 ( "int"                 (. type = this.integer; .)
 | "bool"                (. type = this.boolean; .)
 ).
/*------------------------------------------------------------------------*/
VarDecl                  (. let name_:string;let type:number; .)
= Type<out type>
  Ident<out name_>        (.this.tab.NewObj(name_, this.var, type); .)
  { ',' Ident<out name_>  (.this.tab.NewObj(name_, this.var, type); .)
  } ';'.

END Taste.
