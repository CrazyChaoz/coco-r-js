/*-------------------------------------------------------------------------
Coco.ATG -- Attributed Grammar
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by W. Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
 compile with:
   javac Coco.Coco Coco.ATG -package Coco
-------------------------------------------------------------------------*/

$AFGIJPSX

COMPILER Coco

    static id = 0;
    static str = 1;

    public trace: Trace;        // other Coco objects referenced by this ATG
    public tab: Tab;
    public dfa: DFA;
    public pgen: ParserGen;

    genScanner: boolean;
    tokenString: string;        // used in declarations of literal tokens
    noString = "-none-";        // used in declarations of literal tokens

/*-------------------------------------------------------------------------*/

CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.
  stringCh  = ANY - '"' - '\\' - cr - lf.
  charCh    = ANY - '\'' - '\\' - cr - lf.
  printable = '\u0020' .. '\u007e'.
  hex       = "0123456789abcdef".

TOKENS
  ident     = letter { letter | digit }.
  number    = digit { digit }.
  string    = '"' { stringCh | '\\' printable } '"'.
  badString = '"' { stringCh | '\\' printable } (cr | lf).
  char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
  ddtSym    = '$' { digit | letter }.    (. this.tab.SetDDT(this.la.val); .)
  optionSym = '$' letter { letter } '='
              { digit | letter
              | '-' | '.' | ':'
              }.                         (. this.tab.SetOption(this.la.val); .)

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Coco                            (. let sym: Symbol;
                                           let g, g1, g2: Graph;
                                           let gramName: string;
                                           let s: CharSet;
                                           let beg: number;.)
=
  [ // import statements
    ANY                          (. beg = this.t.pos;.)
    { ANY }                      (. this.pgen.usingPos = new Position(beg, this.la.pos, 0);.)
  ]

  "COMPILER"                    (. this.genScanner = true;
                                   this.tab.ignored = new CharSet(); .)
  ident                         (.gramName = this.t.val;
                                    beg = this.la.pos;
                                 .)
  { ANY }                       (. this.tab.semDeclPos = new Position(beg, this.la.pos, 0); .)
  [ "IGNORECASE"                (.this.dfa.ignoreCase = true; .) ]   /* pdt */
  [ "CHARACTERS" { SetDecl }]
  [ "TOKENS"  { TokenDecl<Node_.t> }]
  [ "PRAGMAS" { TokenDecl<Node_.pr> }]
  { "COMMENTS"                  (.            let nested = false; .)
    "FROM" TokenExpr<out g1>
    "TO" TokenExpr<out g2>
    [ "NESTED"                  (. nested = true; .)
    ]                           (. this.dfa.NewComment(g1.l, g2.l, nested); .)
  }
  { "IGNORE" Set<out s>         (. this.tab.ignored.Or(s);.)
  }

  SYNC
  "PRODUCTIONS"                 (. if (this.genScanner) this.dfa.MakeDeterministic();
                                   this.tab.DeleteNodes();
                                 .)
  { ident                       (. sym = this.tab.FindSym(this.t.val);
                                               let undef = sym == undefined;
                                               if (undef) sym = this.tab.NewSym(Node_.nt, this.t.val, this.t.line);
                                               else {
                                                   if (sym.typ == Node_.nt) {
                                                       if (sym.graph != undefined) this.SemErr("name declared twice");
                                                   } else this.SemErr("this symbol kind not allowed on left side of production");
                                                   sym.line = this.t.line;
                                               }
                                               let noAttrs = sym.attrPos == undefined;
                                               sym.attrPos = undefined;
                                               let noRet = sym.retVar == undefined;
                                               sym.retVar = undefined;
                                 .)
    [ AttrDecl<sym> ]           (. if (!undef)
                                                   if (noAttrs != (sym.attrPos == undefined)
                                                       || noRet != (sym.retVar == undefined))
                                                       this.SemErr("attribute mismatch between declaration and use of this symbol");
                                 .)
    [ SemText<out sym.semPos> ]
    WEAK '='
    Expression<out g>           (. sym.graph = g.l;
                                   this.tab.Finish(g);
                                 .)
    WEAK '.'
  }
  "END" ident                   (. if (gramName != this.t.val) {
                                               this.SemErr("name does not match grammar name");
                                           }
                                           this.tab.gramSy = this.tab.FindSym(gramName);
                                           if (this.tab.gramSy == undefined)
                                               this.SemErr("missing production for grammar name");
                                           else {
                                               sym = this.tab.gramSy;
                                               if (sym.attrPos != undefined) {
                                                   this.SemErr("grammar symbol must not have attributes");
                                               }
                                           }
                                           this.tab.noSym = this.tab.NewSym(Node_.t, "???", 0); // noSym gets highest number
                                           this.tab.SetupAnys();

                                           this.tab.RenumberPragmas();

                                           if (this.tab.ddt[2]) this.tab.PrintNodes();
                                           if (this.errors.count == 0) {
                                               console.log("checking");
                                               this.tab.CompSymbolSets();
                                               if (this.tab.ddt[7]) this.tab.XRef();
                                               if (this.tab.GrammarOk()) {
                                                   console.log("parser");
                                                   this.pgen.WriteParser();
                                                   if (this.genScanner) {
                                                       console.log(" + scanner");

                                                       this.dfa.WriteScanner();
                                                       if (this.tab.ddt[0]) this.dfa.PrintStates();
                                                   }
                                                   console.log(" generated");
                                                   if (this.tab.ddt[8]) this.pgen.WriteStatistics();
                                               }
                                           }
                                           if (this.tab.ddt[6]) this.tab.PrintSymbolTable();
                                 .)
  '.'
.

/*------------------------------------------------------------------------------------*/

SetDecl                         (. let s: CharSet;.)
=
  ident                         (. let name = this.t.val;
                                   let c = this.tab.FindCharClass(name);
                                   if (c != undefined) this.SemErr("name declared twice");
                                 .)
  '=' Set<out s>                (. if (s.Elements() == 0) this.SemErr("character set must not be empty");
                                   c = this.tab.NewCharClass(name, s);
                                 .)
  '.'
.

/*------------------------------------------------------------------------------------*/

Set<out CharSet s>              (. let s2: CharSet;.)
=
  SimSet<out s>
  { '+' SimSet<out s2>          (. s.Or(s2); .)
  | '-' SimSet<out s2>          (. s.Subtract(s2); .)
  }
.

/*------------------------------------------------------------------------------------*/

SimSet<out CharSet s>           (. let n1, n2: number;.)
=                               (. s = new CharSet(); .)
( ident                         (. let c = this.tab.FindCharClass(this.t.val);
                                   if (c == undefined) this.SemErr("undefined name"); else s.Or(c.set);
                                 .)
| string                        (. let name = this.t.val;
                                   name = this.tab.Unescape(name.substring(1, name.length - 1));
                                   for (let i = 0; i < name.length; i++)
                                       if (this.dfa.ignoreCase) s.Set(name.toLowerCase().charCodeAt(0));
                                       else s.Set(name.charCodeAt(i));.)
| Char<out n1>                  (. s.Set(n1); .)
  [ ".." Char<out n2>           (. for (let i = n1; i <= n2; i++) s.Set(i); .)
  ]
| "ANY"                         (. s = new CharSet(); s.Fill(); .)
)
.

/*--------------------------------------------------------------------------------------*/

Char<out number n>
=
  char                          (. let name = this.t.val;
                                   n = 0;
                                   name = this.tab.Unescape(name.substring(1, name.length - 1));
                                   if (name.length == 1) n = name.charAt(0).charCodeAt(0);
                                   else this.SemErr("unacceptable character value");
                                   if (this.dfa.ignoreCase && n >= 'A'.charCodeAt(0) && n <= 'Z'.charCodeAt(0)) n += 32;
                                 .)
.

/*------------------------------------------------------------------------------------*/

TokenDecl<typ: number>              (. let s: SymInfo;
                                   let sym: Symbol;
                                   let g: Graph; .)
=
  Sym<out s>                    (. sym = this.tab.FindSym(s.name);
                                   if (sym != undefined)
                                       this.SemErr("name declared twice");

                                   sym = this.tab.NewSym(typ, s.name, this.t.line);
                                   sym.tokenKind = Symbol.fixedToken;

                                   this.tokenString = undefined;
                                 .)
  SYNC
  ( '=' TokenExpr<out g> '.'    (. if (s.kind == Parser.str) this.SemErr("a literal must not be declared with a structure");
                                   this.tab.Finish(g);
                                   if (this.tokenString == undefined || this.tokenString === this.noString)
                                        this.dfa.ConvertToStates(g.l, sym);
                                   else { // TokenExpr is a single string
                                   if (this.tab.literals[this.tokenString] != undefined)
                                        this.SemErr("token string declared twice");
                                        this.tab.literals[this.tokenString] = sym;
                                        this.dfa.MatchLiteral(this.tokenString, sym);
                                   }
                                 .)
  |                             (. if (s.kind == Parser.id) this.genScanner = false;
                                   else this.dfa.MatchLiteral(sym.name, sym);
                                 .)
  )
  [ SemText<out sym.semPos>     (. if (typ != Node_.pr) this.SemErr("semantic action not allowed here"); .)
  ]
.

/*------------------------------------------------------------------------------------*/

AttrDecl<sym: Symbol>            (. let beg, col: number; .)
=
  '<'                           // attributes denoted by < ... >
  ( ('^' | "out")               (. beg = this.la.pos; .)
    TypeName                    (. sym.retType = this.scanner.buffer.GetString(beg, this.la.pos);.)
    ident                       (. sym.retVar = this.t.val; .)
    ( '>'
    | ','                       (. beg = this.la.pos;
                                  col = this.la.col; .)
      { ANY } '>'               (. if (this.t.pos > beg) sym.attrPos = new Position(beg, this.t.pos, col); .)
    )
  |                             (. beg = this.la.pos;
                                   col = this.la.col; .)
    [ ANY { ANY } ] '>'         (. if (this.t.pos > beg) sym.attrPos = new Position(beg, this.t.pos, col); .)
  )
|
  "<."                          // attributes denoted by <. ... .>
  ( ('^' | "out")               (. beg = this.la.pos; .)
    TypeName                    (. sym.retType = this.scanner.buffer.GetString(beg, this.la.pos); .)
    ident                       (. sym.retVar = this.t.val; .)
    ( ".>"
    | ','                       (. beg = this.la.pos;
                                   col = this.la.col; .)
      { ANY } ".>"              (. if (this.t.pos > beg) sym.attrPos = new Position(beg, this.t.pos, col); .)
    )
  |                             (. beg = this.la.pos;
                                   col = this.la.col; .)
    [ ANY { ANY } ] ".>"        (. if (this.t.pos > beg)sym.attrPos = new Position(beg, this.t.pos, col); .)
  ).

/*------------------------------------------------------------------------------------*/
// type names may contain angle brackets for generics
TypeName
= ident {'.' ident | '[' ']' | '<' TypeName {',' TypeName} '>'}.

/*------------------------------------------------------------------------------------*/

Expression<out Graph g>         (. let g2: Graph;.)
=
  Term<out g>                   (. let first = true; .)
  { WEAK '|'
    Term<out g2>                (. if (first) {
                                      this.tab.MakeFirstAlt(g);
                                      first = false;
                                   }
                                   this.tab.MakeAlternative(g, g2);
                                 .)
  }
.

/*------------------------------------------------------------------------------------*/

Term<out Graph g>               (. let g2: Graph;
                                   let rslv: Node_ = undefined;
                                   g = undefined; .)
=
( [                             (. rslv = this.tab.NewNode(Node_.rslv, undefined, this.la.line); .)
    Resolver<out rslv.pos>      (. g = new Graph(rslv); .)
  ]
  Factor<out g2>                (. if (rslv != undefined) this.tab.MakeSequence(g, g2);
                                   else g = g2;
                                 .)
  { Factor<out g2>              (. this.tab.MakeSequence(g, g2); .)
  }
|                               (. g = new Graph(this.tab.NewNode(Node_.eps, undefined, 0)); .)
)                               (. if (g == undefined) // invalid start of Term
                                        g = new Graph(this.tab.NewNode(Node_.eps, undefined, 0));
                                 .)
.

/*------------------------------------------------------------------------------------*/

Factor<out Graph g>             (. let s: SymInfo;
                                   let pos: Position;
                                   let weak = false;
                                   g = undefined;
                                   let p: Node_;
                                   .)
=
( [ "WEAK"                      (. weak = true; .)
  ]
  Sym<out s>                    (. let sym = this.tab.FindSym(s.name);
                                                   if (sym == undefined && s.kind == Parser.str)
                                                       sym = this.tab.literals[s.name];
                                                   let undef = sym == undefined;
                                                   if (undef) {
                                                       if (s.kind == Parser.id)
                                                           sym = this.tab.NewSym(Node_.nt, s.name, 0);  // forward nt
                                                       else if (this.genScanner) {
                                                           sym = this.tab.NewSym(Node_.t, s.name, this.t.line);
                                                           this.dfa.MatchLiteral(sym.name, sym);
                                                       } else {  // undefined string in production
                                                           this.SemErr("undefined string in production");
                                                           sym = this.tab.eofSy;  // dummy
                                                       }
                                                   }
                                                   let typ = sym.typ;
                                                   if (typ != Node_.t && typ != Node_.nt)
                                                       this.SemErr("this symbol kind is not allowed in a production");
                                                   if (weak)
                                                       if (typ == Node_.t) typ = Node_.wt;
                                                       else this.SemErr("only terminals may be weak");
                                                   p = this.tab.NewNode(typ, sym, this.t.line);
                                                   g = new Graph(p);
                                 .)
  [ Attribs<p>                  (. if (s.kind != Parser.id) this.SemErr("a literal must not have attributes"); .)
  ]                             (. if (undef) {
                                        sym.attrPos = p.pos;  // dummy
                                        sym.retVar = p.retVar;  // AH - dummy
                                   } else if ((p.pos == undefined) != (sym.attrPos == undefined) || (p.retVar == undefined) != (sym.retVar == undefined))
                                        this.SemErr("attribute mismatch between declaration and use of this symbol");
                                 .)
| '(' Expression<out g> ')'
| '[' Expression<out g> ']'     (. this.tab.MakeOption(g); .)
| '{' Expression<out g> '}'     (. this.tab.MakeIteration(g); .)
| SemText<out pos>              (. p = this.tab.NewNode(Node_.sem, undefined, 0);
                                   p.pos = pos;
                                   g = new Graph(p);
                                 .)
| "ANY"                         (. p = this.tab.NewNode(Node_.any, undefined, this.t.line);  // p.set is set in tab.SetupAnys
                                   g = new Graph(p);
                                 .)
| "SYNC"                        (. p = this.tab.NewNode(Node_.sync, undefined, 0);
                                   g = new Graph(p);
                                 .)
)                               (. if (g == undefined) // invalid start of Factor
                                        g = new Graph(this.tab.NewNode(Node_.eps, undefined, 0));
                                 .)
.

/*------------------------------------------------------------------------------------*/

Resolver<out Position pos>
=
  "IF" "("                      (. let beg = this.la.pos;
                                   let col = this.la.col; .)
  Condition                     (. pos = new Position(beg, this.t.pos, col); .)
.

/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

TokenExpr<out Graph g>          (. let g2: Graph; .)
=
  TokenTerm<out g>              (. let first = true; .)
  { WEAK '|'
    TokenTerm<out g2>           (. if (first) {
                                        this.tab.MakeFirstAlt(g);
                                        first = false;
                                   }
                                   this.tab.MakeAlternative(g, g2);
                                .)
  }
.

/*------------------------------------------------------------------------------------*/

TokenTerm<out Graph g>          (. let g2: Graph; .)
=
  TokenFactor<out g>
  { TokenFactor<out g2>         (. this.tab.MakeSequence(g, g2); .)
  }
  [ "CONTEXT"
    '(' TokenExpr<out g2>       (. this.tab.SetContextTrans(g2.l);
                                   this.dfa.hasCtxMoves = true;
                                   this.tab.MakeSequence(g, g2); .)
    ')'
  ]
.

/*------------------------------------------------------------------------------------*/

TokenFactor<out Graph g>        (. let s: SymInfo; .)
=
                                (. g = undefined; .)
( Sym<out s>                    (. if (s.kind == Parser.id) {
                                                   let c = this.tab.FindCharClass(s.name);
                                                   if (c == undefined) {
                                                       this.SemErr("undefined name");
                                                       c = this.tab.NewCharClass(s.name, new CharSet());
                                                   }
                                                   let p = this.tab.NewNode(Node_.clas, undefined, 0);
                                                   p.val = c.n;
                                                   g = new Graph(p);
                                                   this.tokenString = this.noString;
                                               } else { // str
                                                   g = this.tab.StrToGraph(s.name);
                                                   if (this.tokenString == undefined) this.tokenString = s.name;
                                                   else this.tokenString = this.noString;
                                               }
                                 .)
| '(' TokenExpr<out g> ')'
| '[' TokenExpr<out g> ']'      (. this.tab.MakeOption(g);
                                   this.tokenString = this.noString; .)
| '{' TokenExpr<out g> '}'      (. this.tab.MakeIteration(g);
                                   this.tokenString = this.noString; .)
)                               (. if (g == undefined) // invalid start of TokenFactor
                                        g = new Graph(this.tab.NewNode(Node_.eps, undefined, 0));.)
.

/*------------------------------------------------------------------------------------*/

Sym<out SymInfo s>
=                               (. s = new SymInfo();
                                   s.name = "???";
                                   s.kind = Parser.id;.)
( ident                         (. s.kind = Parser.id;
                                   s.name = this.t.val; .)
| (string                       (. s.name = this.t.val; .)
  | char                        (. s.name = "\"" + this.t.val.substring(1, this.t.val.length - 1) + "\""; .)
  )                             (. s.kind = Parser.str;
                                   if (this.dfa.ignoreCase) s.name = s.name.toLowerCase();
                                   if (s.name.indexOf(' ') >= 0)
                                        this.SemErr("literal tokens must not contain blanks"); .)
)
.

/*------------------------------------------------------------------------------------*/

Attribs<n: Node_>                 (. let beg, col: number; .)
=
  '<'                           // attributes denoted by < ... >
  ( ('^' | "out")               (. beg = this.la.pos; .)
    { ANY
    | Bracketed
    | badString                 (. this.SemErr("bad string in attributes"); .)
    }                           (. n.retVar = this.scanner.buffer.GetString(beg, this.la.pos); .)
    ( '>'
    | ','                       (. beg = this.la.pos;
                                   col = this.la.col; .)
      {  ANY
       | badString              (. this.SemErr("bad string in attributes"); .)
      } '>'                     (. if (this.t.pos > beg) n.pos = new Position(beg, this.t.pos, col); .)
    )
  |                             (. beg = this.la.pos;
                                   col = this.la.col; .)
    [ ( ANY
	  | badString               (. this.SemErr("bad string in attributes"); .)
	  )
      {  ANY
      | badString               (. this.SemErr("bad string in attributes"); .)
      }
    ] '>'                       (. if (this.t.pos > beg) n.pos = new Position(beg, this.t.pos, col); .)
  )
|
	"<."                          // attributes denoted by <. ... .>
  ( ('^' | "out")               (. beg = this.la.pos; .)
    { ANY
    | Bracketed
    | badString                 (. this.SemErr("bad string in attributes"); .)
    }                           (. n.retVar = this.scanner.buffer.GetString(beg, this.la.pos); .)
    ( ".>"
    | ','                       (. beg = this.la.pos;
                                   col = this.la.col; .)
      {  ANY
       | badString              (. this.SemErr("bad string in attributes"); .)
      } ".>"                    (. if (this.t.pos > beg) n.pos = new Position(beg, this.t.pos, col); .)
    )
  |                             (. beg = this.la.pos;
                                   col = this.la.col; .)
    [ ( ANY
	  | badString               (. this.SemErr("bad string in attributes"); .)
	  )
      {  ANY
      | badString               (. this.SemErr("bad string in attributes"); .)
      }
    ] ".>"                      (. if (this.t.pos > beg) n.pos = new Position(beg, this.t.pos, col); .)
  )
.

/*------------------------------------------------------------------------------------*/
// skip commas in brackets such as in <out a[i, j], b> or <out a[foo(x, y)], z>
Bracketed
= '(' {Bracketed | ANY} ')' | '[' {Bracketed | ANY} ']'.

/*------------------------------------------------------------------------------------*/

SemText<out Position pos>
=
  "(."                          (. let beg = this.la.pos;
                                   let col = this.la.col; .)
  { ANY
  | badString                   (. this.SemErr("bad string in semantic action"); .)
  | "(."                        (. this.SemErr("missing end of previous semantic action"); .)
  }
  ".)"                          (. pos = new Position(beg, this.t.pos, col); .)
.

END Coco.